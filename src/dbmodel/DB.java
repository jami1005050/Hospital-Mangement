/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package dbmodel;

import java.sql.*;
import entity.*;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Raiyan
 */
public class DB {
    Connection mysql;
    Statement stmnt;//The object used for executing a static SQL statement and returning the results it produces. 
    PreparedStatement pstmnt;/*A SQL statement is precompiled and stored in a PreparedStatement object.
   This object can then be used to efficiently execute this statement multiple times. */
    ResultSet rs;/*A table of data representing a database result set, which is usually generated by 
    executing a statement that queries the database.A ResultSet object maintains a cursor pointing 
    to its current row of data. Initially the cursor is positioned before the first row.*/
    private String url, username, password;
    Date date;
    public DB() {
        url = "jdbc:mysql://localhost/hms";
        username = "root";
        password = "123";
        date = new Date(System.currentTimeMillis());
        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            mysql = DriverManager.getConnection(url, username, password);//initialize driver manager with suitable jdbc dbdriver
            stmnt = mysql.createStatement();//Creates a Statement object for sending SQL statements to the database.
            System.out.println("connection works");
        } catch(Exception e) {
            System.out.println(e.toString());
        }
    }
    
    public boolean authenticateAdmin(int id, String k1,String k2) throws SQLException {
        String sql = "SELECT first_name, last_name from admin_tbl where phone_no="+id+
                " and key_1=sha('"+k1+"')"+ " and key_2=sha('"+k2+"')";
        //System.out.println(sql);
        rs = stmnt.executeQuery(sql);
        
        if(rs.last()) {   /*Moves the cursor to the last row in this ResultSet object.
            true if the cursor is on a valid row; false if there are no rows in the result set*/
            System.out.println("Log in successfull");
            return true;
        } else {
            System.out.println("Invalid ID or password...");
            return false;
        }
    }
    //jami
     public boolean authenticateOperator(int id, String k1) throws SQLException {
         String desg="operator";
        String sql = "SELECT first_name, last_name from employee_tbl where phone_no="+id+
                " and key_1=sha('"+k1+"')"+ " and designation="+desg;
        //System.out.println(sql);
        rs = stmnt.executeQuery(sql);
        
        if(rs.last()) {   /*Moves the cursor to the last row in this ResultSet object.
            true if the cursor is on a valid row; false if there are no rows in the result set*/
           System.out.println("Log in successfull");
            return true;
        } else {
            System.out.println("Invalid ID or password...");
            return false;
        }
    }
    
    
    public boolean addAdmin(AdministratorEntity ad) throws SQLException, FileNotFoundException {
        String sql = "INSERT into admin_tbl(first_name, last_name, father_name, email, address, academic, key_1,key_2,"
                + "date,phone_no,photo) values (?,?,?,?,?,?,?,?,?,?,?)";
        pstmnt = mysql.prepareStatement(sql); // create a statement.
        //Creates a PreparedStatement object for sending parameterized SQL statements to the database. 
        pstmnt.setString(1, ad.fname); // set input parameter 2
        pstmnt.setString(2, ad.lname);// set input parameter 3
        pstmnt.setString(3, ad.fthr_name);
        pstmnt.setString(4, ad.email);
        pstmnt.setString(5, ad.address);
        pstmnt.setString(6, ad.academic);
        pstmnt.setString(7, ad.key1);
        pstmnt.setString(8, ad.key2);
        pstmnt.setDate(9, date);
        //pstmnt.setString(9, String.format("y-M-d", date));
        pstmnt.setInt(10, ad.phone_no);
        FileInputStream fis = new FileInputStream(ad.photo);
        pstmnt.setBinaryStream(11, (InputStream)fis, (int)(ad.photo.length()));
        if(pstmnt.executeUpdate() == 1) {
            return true;
        } else {
            return false;
        }
    }
    public boolean addDoctor(DoctorEntity ad) throws SQLException, FileNotFoundException {
        String sql = "INSERT into doctor_tbl(first_name, last_name, father_name, email, address, academic, key_1,key_2,"
                + "date,phone_no,photo) values (?,?,?,?,?,?,?,?,?,?,?)";
        pstmnt = mysql.prepareStatement(sql); // create a statement
        pstmnt.setString(1, ad.fname); // set input parameter 2
        pstmnt.setString(2, ad.lname);// set input parameter 3
        pstmnt.setString(3, ad.fthr_name);
        pstmnt.setString(4, ad.email);
        pstmnt.setString(5, ad.address);
        pstmnt.setString(6, ad.academic);
        pstmnt.setString(7, ad.key1);
        pstmnt.setString(8, ad.key2);
        pstmnt.setDate(9, date);
        //pstmnt.setString(9, String.format("y-M-d", date));
        pstmnt.setInt(10, ad.phone_no);
        FileInputStream fis = new FileInputStream(ad.photo);
        pstmnt.setBinaryStream(11, (InputStream)fis, (int)(ad.photo.length()));
        if(pstmnt.executeUpdate() == 1) {
            return true;
        } else {
            return false;
        }
    }
    
    public boolean addEmployee(EmployeeEntity ad) throws SQLException, FileNotFoundException {
        String sql = "INSERT into employee_tbl(first_name, last_name, father_name, email, address, academic, password,"
                + "date,phone_no,photo) values (?,?,?,?,?,?,?,?,?,?)";
        pstmnt = mysql.prepareStatement(sql); // create a statement
        pstmnt.setString(1, ad.fname); // set input parameter 2
        pstmnt.setString(2, ad.lname);// set input parameter 3
        pstmnt.setString(3, ad.fthr_name);
        pstmnt.setString(4, ad.email);
        pstmnt.setString(5, ad.address);
        pstmnt.setString(6, ad.academic);
        pstmnt.setString(7, ad.password);
        //pstmnt.setString(8, ad.key2);
        pstmnt.setDate(8, date);
        //pstmnt.setString(9, String.format("y-M-d", date));
        pstmnt.setInt(9, ad.phone_no);
        FileInputStream fis = new FileInputStream(ad.photo);
        pstmnt.setBinaryStream(10, (InputStream)fis, (int)(ad.photo.length()));
        if(pstmnt.executeUpdate() == 1) {
            return true;
        } else {
            return false;
        }
    }
    
    public ArrayList<DoctorEntity> findDoctors() throws SQLException {
        ArrayList<DoctorEntity> doctors = new ArrayList<DoctorEntity>();
        String sql = "SELECT first_name, last_name, phone_no, academic, address, photo,email from doctor_tbl";
        rs = stmnt.executeQuery(sql);//Executes the given SQL statement, which returns a single ResultSet object.
        while(rs.next()) {
            DoctorEntity doc = new DoctorEntity(rs.getString("first_name"),rs.getString("last_name"),"",rs.getString("email"),
                    rs.getString("address"),rs.getString("academic"),rs.getInt("phone_no"),null);
            doc.image = rs.getBytes("photo");
            doctors.add(doc);
        }
        return doctors;
    }
    
    public ArrayList<EmployeeEntity> findEmployees() throws SQLException {
        ArrayList<EmployeeEntity> employees = new ArrayList<EmployeeEntity>();
        String sql = "SELECT first_name, last_name, phone_no, academic, address, photo,email from employee_tbl";
        rs = stmnt.executeQuery(sql);
        while(rs.next()) {
            EmployeeEntity emp = new EmployeeEntity(rs.getString("first_name"),rs.getString("last_name"),"",rs.getString("email"),
                    rs.getString("address"),rs.getString("academic"),rs.getInt("phone_no"),null);
            emp.image = rs.getBytes("photo");
            employees.add(emp);
        }
        return employees;
    }
    
    public ArrayList<AdministratorEntity> findAdmins() throws SQLException {
        ArrayList<AdministratorEntity> admins = new ArrayList<AdministratorEntity>();
        String sql = "SELECT first_name, last_name, phone_no, academic, address, photo,email from admin_tbl";
        rs = stmnt.executeQuery(sql);
        while(rs.next()) {
            AdministratorEntity ad = new EmployeeEntity(rs.getString("first_name"),rs.getString("last_name"),"",rs.getString("email"),
                    rs.getString("address"),rs.getString("academic"),rs.getInt("phone_no"),null);
            ad.image = rs.getBytes("photo");
            admins.add(ad);
        }
        return admins;
    }
    public DoctorEntity docDesg(int docID) throws SQLException {
        DoctorEntity doc = null;
        String sql = "SELECT * from doctor_tbl where phone_no="+docID;
        System.out.println(sql);
        rs = stmnt.executeQuery(sql);
        //System.out.println(rs.getString("first_name"));
        if(rs.next()) {
            doc = new DoctorEntity(rs.getString("first_name"),rs.getString("last_name"),"",rs.getString("email"),
                    rs.getString("address"),rs.getString("academic"),rs.getInt("phone_no"),null);
            doc.image = rs.getBytes("photo");
            doc.designation = rs.getString("designation");
            
        }
        return doc;
    }
    
    public EmployeeEntity empDesg(int empID) throws SQLException {
        EmployeeEntity emp = null;
        String sql = "SELECT * from employee_tbl where phone_no="+empID;
        System.out.println(sql);
        rs = stmnt.executeQuery(sql);
        //System.out.println(rs.getString("first_name"));
        if(rs.next()) {
            emp = new EmployeeEntity(rs.getString("first_name"),rs.getString("last_name"),"",rs.getString("email"),
                    rs.getString("address"),rs.getString("academic"),rs.getInt("phone_no"),null);
            emp.image = rs.getBytes("photo");
            emp.designation = rs.getString("designation");
            
        }
        //System.out.println(rs.getString("first_name"));
        return emp;
    }
    
    public boolean chgDocDesg(int docID, String desg) throws SQLException {
        String sql = "UPDATE doctor_tbl SET designation='"+ desg+"' where phone_no="+docID;
        //System.out.println(sql);
        //rs = stmnt.executeQuery(sql);
        return !stmnt.execute(sql);
        //return rs.rowUpdated();
    }
    
    public boolean chgEmpDesg(int empID, String desg) throws SQLException {
        String sql = "UPDATE employee_tbl SET designation='"+ desg+"' where phone_no="+empID;
        return !stmnt.execute(sql);
    }
    //jami
    

    public  static class Bed {
        public int wardNo;
        public int bedNo;
        public int bedCost;
        public int status;
        

        private Bed(int wNo, int bNo, int bCost, int s) {
            //throw new UnsupportedOperationException("Not supported yet."); 
            //To change body of generated methods, choose Tools | Templates.
            wardNo=wNo;
            bedNo=bNo;
            bedCost=bCost;
            status=s;
            
        }
    }

    public static class Cabin {
        public int cabinNo;
        public int cabinCost;
        public int status;
        public String cabinType;
        

        private Cabin(int cNo, String t, int cCost, String d, int s) {
            //throw new UnsupportedOperationException("Not supported yet."); 
            //To change body of generated methods, choose Tools | Templates.
            cabinNo=cNo;
            
            cabinCost=cCost;
            status=s;
        }
    }

    public static class Icu {
        public int icuUnitNo;
        public int icuBedNo;
        public int icuBedCost;
        public int  status;
        

        private Icu(int iUNo, int iBNo, int iUCost, int s) {
            //throw new UnsupportedOperationException("Not supported yet.");
            //To change body of generated methods, choose Tools | Templates.
            icuUnitNo=iUNo;
            icuBedNo=iBNo;            
            icuBedCost=iUCost;
            status=s;
        }
    }
    public ArrayList<Bed> findBeds() throws SQLException {
        ArrayList<Bed> beds = new ArrayList<Bed>();
        String sql = "SELECT * from bed_tbl";
        rs = stmnt.executeQuery(sql);
        while(rs.next()) {
            Bed bed = new Bed(rs.getInt("wardNo"),rs.getInt("bedNo"),rs.getInt("bedCost"),
                    rs.getInt("status"));
            //ad.image = rs.getBytes("photo");
            beds.add(bed);
        }
        return beds;
    }
    public ArrayList<Cabin> findCabins() throws SQLException {
        ArrayList<Cabin> cabins = new ArrayList<Cabin>();
        String sql = "SELECT * from cabin_tbl";
        rs = stmnt.executeQuery(sql);
        while(rs.next()) {
            Cabin cabin = new Cabin(rs.getInt("cabinNo"),null,rs.getInt("cabinCost"),null,
                    rs.getInt("status"));
            //ad.image = rs.getBytes("photo");
            cabins.add(cabin);
        }
        return cabins;
    }
    public ArrayList<Icu> findIcu() throws SQLException {
        ArrayList<Icu> icus = new ArrayList<Icu>();
        String sql = "SELECT * from icu_tbl";
        rs = stmnt.executeQuery(sql);
        while(rs.next()) {
            Icu icu = new Icu(rs.getInt("icuUnitNo"),rs.getInt("icuBedNo"),rs.getInt("icuBedCost"),rs.getInt("status"));
            //ad.image = rs.getBytes("photo");
            icus.add(icu);
        }
        return icus;
    }
    
    
    public boolean addPatient(PatientEntity pt) throws SQLException, FileNotFoundException {
        String sql = "INSERT into patient_tbl(first_name, last_name, father_name, email, address, password,"
                + "date,phone_no,photo) values (?,?,?,?,?,?,?,?,?)";
        pstmnt = mysql.prepareStatement(sql); // create a statement
        pstmnt.setString(1, pt.fname); // set input parameter 2
        pstmnt.setString(2, pt.lname);// set input parameter 3
        pstmnt.setString(3, pt.fthr_name);
        pstmnt.setString(4, pt.email);
        pstmnt.setString(5, pt.address);
        pstmnt.setString(6, pt.password);
        //pstmnt.setString(8, ad.key2);
        pstmnt.setDate(7, date);
        //pstmnt.setString(9, String.format("y-M-d", date));
        pstmnt.setInt(8, pt.phone_no);
        FileInputStream fis = new FileInputStream(pt.photo);
        pstmnt.setBinaryStream(9, (InputStream)fis, (int)(pt.photo.length()));
        if(pstmnt.executeUpdate() == 1) {
            return true;
        } else {
            return false;
        }
    }
    
    /*public static void  main(String []args)
    {
        try {
            ArrayList<Icu> icu=new ArrayList<Icu>();
            DB b= new DB();
            icu=b.findIcu();
            for(Icu i:icu)
            {
                System.out.println(i.icuBedCost+"\n"+i.icuBedNo+"\n"+ i.icuUnitNo+"\n"+i.status);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(DB.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }*/

}
